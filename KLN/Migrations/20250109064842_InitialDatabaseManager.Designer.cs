// <auto-generated />
using System;
using KLN.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KLN.Migrations
{
    [DbContext(typeof(DatabaseManager))]
    [Migration("20250109064842_InitialDatabaseManager")]
    partial class InitialDatabaseManager
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KLN.Models.Account", b =>
                {
                    b.Property<string>("accountId")
                        .HasColumnType("varchar")
                        .HasColumnName("accountId");

                    b.Property<bool?>("hide")
                        .HasColumnType("bit")
                        .HasColumnName("hide");

                    b.Property<string>("password")
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("passwordResetToken")
                        .HasColumnType("varchar")
                        .HasColumnName("passwordResetToken");

                    b.Property<string>("role_id")
                        .HasColumnType("varchar")
                        .HasColumnName("role_id");

                    b.Property<string>("tokenExpiration")
                        .HasColumnType("varchar")
                        .HasColumnName("tokenExpiration");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar")
                        .HasColumnName("username");

                    b.HasKey("accountId");

                    b.HasIndex("role_id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("KLN.Models.Blog", b =>
                {
                    b.Property<string>("blogId")
                        .HasColumnType("varchar")
                        .HasColumnName("blogId");

                    b.Property<string>("blogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("blogContent");

                    b.Property<string>("blogTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("blogTitle");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("userId");

                    b.HasKey("blogId");

                    b.HasIndex("userId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("KLN.Models.LogSlideShow", b =>
                {
                    b.Property<int>("logSlideShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("logSlideShowId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("logSlideShowId"));

                    b.Property<DateTime?>("createDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("flag")
                        .HasColumnType("varchar")
                        .HasColumnName("flag");

                    b.Property<string>("image")
                        .HasColumnType("varchar")
                        .HasColumnName("image");

                    b.Property<string>("process")
                        .HasColumnType("varchar")
                        .HasColumnName("process");

                    b.Property<string>("slideShowId")
                        .HasColumnType("varchar")
                        .HasColumnName("slideShowId");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar")
                        .HasColumnName("title");

                    b.Property<DateTime?>("updateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate");

                    b.Property<string>("userId")
                        .HasColumnType("varchar")
                        .HasColumnName("userId");

                    b.Property<string>("version")
                        .HasColumnType("varchar")
                        .HasColumnName("version");

                    b.HasKey("logSlideShowId");

                    b.HasIndex("slideShowId");

                    b.HasIndex("userId");

                    b.ToTable("LogSlideShow");
                });

            modelBuilder.Entity("KLN.Models.Role", b =>
                {
                    b.Property<string>("role_id")
                        .HasColumnType("varchar")
                        .HasColumnName("role_id");

                    b.Property<string>("role_name")
                        .HasColumnType("varchar")
                        .HasColumnName("role_name");

                    b.HasKey("role_id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("KLN.Models.SlideShow", b =>
                {
                    b.Property<string>("slideShowId")
                        .HasColumnType("varchar")
                        .HasColumnName("slideShowId");

                    b.Property<DateTime?>("createDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("image")
                        .HasColumnType("varchar")
                        .HasColumnName("image");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar")
                        .HasColumnName("title");

                    b.Property<string>("userId")
                        .HasColumnType("varchar")
                        .HasColumnName("userId");

                    b.HasKey("slideShowId");

                    b.HasIndex("userId");

                    b.ToTable("SlideShow");
                });

            modelBuilder.Entity("KLN.Models.User", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("varchar")
                        .HasColumnName("userId");

                    b.Property<string>("accountId")
                        .HasColumnType("varchar")
                        .HasColumnName("accountId");

                    b.Property<string>("email")
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar")
                        .HasColumnName("name");

                    b.HasKey("userId");

                    b.HasIndex("accountId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KLN.Models.Account", b =>
                {
                    b.HasOne("KLN.Models.Role", "role")
                        .WithMany()
                        .HasForeignKey("role_id");

                    b.Navigation("role");
                });

            modelBuilder.Entity("KLN.Models.Blog", b =>
                {
                    b.HasOne("KLN.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("KLN.Models.LogSlideShow", b =>
                {
                    b.HasOne("KLN.Models.SlideShow", "slideShow")
                        .WithMany()
                        .HasForeignKey("slideShowId");

                    b.HasOne("KLN.Models.User", "user")
                        .WithMany("logSlideShow")
                        .HasForeignKey("userId");

                    b.Navigation("slideShow");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KLN.Models.SlideShow", b =>
                {
                    b.HasOne("KLN.Models.User", "user")
                        .WithMany("slideShows")
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("KLN.Models.User", b =>
                {
                    b.HasOne("KLN.Models.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId");

                    b.Navigation("account");
                });

            modelBuilder.Entity("KLN.Models.User", b =>
                {
                    b.Navigation("logSlideShow");

                    b.Navigation("slideShows");
                });
#pragma warning restore 612, 618
        }
    }
}
